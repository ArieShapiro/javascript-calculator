{"version":3,"sources":["components/Button.js","components/Console.js","App.js","serviceWorker.js","store/store.js","index.js"],"names":["Button","inject","styleObj","this","props","width","height","key","type","store","react_default","a","createElement","className","style","onClick","handleKeypress","React","Component","Console","observer","consoleTop","consoleButtom","App","components_Console","components_Button","Boolean","window","location","hostname","match","Store","_this","handleEqual","clearAll","handleInput","handleDot","Number","isInteger","parseInt","handleInteger","handleOperator","result","convertToMathExpression","concat","observable","action","ReactDOM","render","mobx_react_module","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4cd80fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport { inject } from 'mobx-react';\r\nimport '../styles/Button.css';\r\n\r\n@inject('store')\r\nclass Button extends React.Component {\r\n    // handleKeypress = key => {\r\n    //   this.props.store.handleKeypress(key);      \r\n    // }\r\n    render() {\r\n        let styleObj = {};\r\n        //normal\r\n        if (!this.props.width && !this.props.height) {\r\n            styleObj = {\r\n                width: '60px',\r\n                height: '60px'\r\n            };\r\n            //high\r\n        } else if (this.props.height) {\r\n            styleObj = {\r\n                width: '60px',\r\n                height: '122px'\r\n            };\r\n            //wide\r\n        } else {\r\n            styleObj = {\r\n                width: '122px',\r\n                height: '60px'\r\n            };\r\n        }\r\n        const key = this.props.type;\r\n        const store = this.props.store;\r\n        return (\r\n            <div className=\"Button\"\r\n                style={{ width: styleObj.width, height: styleObj.height }}\r\n                onClick={() => { store.handleKeypress(key) }}\r\n            >\r\n                <p>{key}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\nimport '../styles/Console.css';\r\n\r\n@inject('store')\r\n@observer\r\nclass Console extends React.Component {\r\n    render() {\r\n        const consoleTop = this.props.store.consoleTop;\r\n        const consoleButtom = this.props.store.consoleButtom;\r\n        return (\r\n            <div className=\"Console\">\r\n                <h3 className=\"top\">{consoleTop}</h3>\r\n                <h3 className=\"buttom\">{consoleButtom}</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Console;","import React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport Button from './components/Button.js';\nimport Console from './components/Console.js';\nimport './styles/App.css';\n\n\n@inject('store')\n@observer\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Console />\n        <div className=\"row\">\n          <Button width={2} type='AC' />\n          <Button type='/' />\n          <Button type='x' />\n        </div>\n        <div className=\"row\">\n          <Button type='7' />\n          <Button type='8' />\n          <Button type='9' />\n          <Button type='-' />\n        </div>\n        <div className=\"row\">\n          <Button type='4' />\n          <Button type='5' />\n          <Button type='6' />\n          <Button type='+' />\n        </div>\n        <div className=\"row\">\n          <div>\n            <div className=\"row\">\n              <Button type='1' />\n              <Button type='2' />\n              <Button type='3' />\n            </div>\n            <div className=\"row\">\n              <Button type='0' width={2} />\n              <Button type='.' />\n            </div>\n          </div>\n          <div>\n            <Button type='=' height={2} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, computed, action } from 'mobx';\r\n\r\n\r\nclass Store {\r\n    @observable consoleTop = '';\r\n    @observable consoleButtom = '0';\r\n\r\n    //******************actions*****************//\r\n    @action clearAll() {\r\n        this.consoleTop = '';\r\n        this.consoleButtom = '0'\r\n    }\r\n    @action handleEqual() {\r\n        const result = this.convertToMathExpression(this.consoleTop);\r\n        this.consoleTop += ' = ' + result;\r\n        this.consoleButtom = result;\r\n    }\r\n    @action handleDot() {\r\n        this.consoleTop += '.'\r\n    }\r\n    @action handleInteger(key) {\r\n        if (this.consoleButtom !== '0') this.clearAll();\r\n        this.consoleTop += key;\r\n    }\r\n    @action handleOperator(key) {\r\n        key = key === 'x' ? '*' : key;\r\n        this.consoleTop += ` ${key} `;\r\n    }\r\n\r\n    /**************functions******************/\r\n    handleKeypress = key => {\r\n        if (key === '=') {\r\n            this.handleEqual();\r\n        } else if (key === 'AC') {\r\n            this.clearAll();\r\n        } else {\r\n            this.handleInput(key);\r\n        }\r\n    }\r\n    handleInput = key => {\r\n        if (key === '.') {\r\n            this.handleDot();\r\n        } else if (Number.isInteger(parseInt(key))) {\r\n            this.handleInteger(key);\r\n        } else {\r\n            //operator\r\n            this.handleOperator(key);\r\n        }\r\n    }\r\n}\r\n\r\nconst store = window.store = new Store;\r\n\r\nexport default store;\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport store from './store/store.js';\nimport './styles/index.css';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <div className=\"index\">\n            <h1>Javascript Calculator</h1>\n            <h3>(Whith React & MobX)</h3>\n            <App />\n        </div>\n\n    </Provider>\n    , document.getElementById('root'));\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n"],"sourceRoot":""}